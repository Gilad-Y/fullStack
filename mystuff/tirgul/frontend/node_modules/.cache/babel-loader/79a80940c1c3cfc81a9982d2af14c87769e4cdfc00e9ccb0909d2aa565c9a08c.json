{"ast":null,"code":"var _jsxFileName = \"/Users/gilad/Desktop/jhon_bryce/fullStack/mystuff/tirgul/frontend/src/Components/Pages/taskBoard/taskBoard.tsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { store } from \"../../redux/store\";\nimport { downloadTask, removeTask } from \"../../redux/tasksReducer\";\nimport \"./taskBoard.css\";\nimport SingleTask from \"./singleTask/singleTask\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TaskBoard() {\n  _s();\n  const [refresh, setRefresh] = useState(false);\n  // useEffect(()=>{\n  //     if (store.getState().task.tasks.length<1){\n  //         // if(!localStorage.getItem(\"tasks\")){\n  //         //     localStorage.setItem(\"tasks\",\"\")\n  //         // }\n  //    store.dispatch(\n  //             downloadTask(JSON.parse(localStorage.getItem(\"tasks\")as any))\n  //         )\n  //         setRefresh(!refresh);\n  //     }\n  // },[])\n  useEffect(() => {\n    axios.get(\"http://localhost:4000/api/v1/taskboard/getAllTasks\").then(response => response.data).then(result => {\n      store.dispatch(downloadTask(result));\n      setRefresh(!refresh);\n    });\n  }, []);\n  const deleteTask = id => {\n    console.log(id);\n    axios.delete(`http://localhost:4000/api/v1/taskboard/deleteTask/${id}`).then(() => store.dispatch(removeTask(id)));\n  };\n  setRefresh(!refresh);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"taskBoard\",\n    children: store.getState().task.tasks.map(item => /*#__PURE__*/_jsxDEV(SingleTask, {\n      id: item.id,\n      content: item.content,\n      type: item.type,\n      onDeleteTask: deleteTask\n    }, item.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this);\n}\n_s(TaskBoard, \"9jkjObSiUYi0qt4rQo5g/Sus/cM=\");\n_c = TaskBoard;\nexport default TaskBoard;\nvar _c;\n$RefreshReg$(_c, \"TaskBoard\");","map":{"version":3,"names":["useState","useEffect","store","downloadTask","removeTask","SingleTask","axios","jsxDEV","_jsxDEV","TaskBoard","_s","refresh","setRefresh","get","then","response","data","result","dispatch","deleteTask","id","console","log","delete","className","children","getState","task","tasks","map","item","content","type","onDeleteTask","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/gilad/Desktop/jhon_bryce/fullStack/mystuff/tirgul/frontend/src/Components/Pages/taskBoard/taskBoard.tsx"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport { store } from \"../../redux/store\";\nimport { addTask, downloadTask, removeTask } from \"../../redux/tasksReducer\";\nimport \"./taskBoard.css\";\nimport { Tasks } from \"../../modal/taskModal\";\nimport SingleTask from \"./singleTask/singleTask\";\nimport axios, { all } from \"axios\";\nfunction TaskBoard(): JSX.Element {\n    const [refresh,setRefresh]=useState(false);\n    // useEffect(()=>{\n    //     if (store.getState().task.tasks.length<1){\n    //         // if(!localStorage.getItem(\"tasks\")){\n    //         //     localStorage.setItem(\"tasks\",\"\")\n    //         // }\n    //    store.dispatch(\n    //             downloadTask(JSON.parse(localStorage.getItem(\"tasks\")as any))\n    //         )\n    //         setRefresh(!refresh);\n    //     }\n    // },[])\n    useEffect(()=>{\n        axios.get \n        (\"http://localhost:4000/api/v1/taskboard/getAllTasks\") \n        .then((response)=>response.data)\n        .then((result)=>{\n            store.dispatch(downloadTask(result))\n            setRefresh(!refresh)\n        })\n    },[])\n  \n    const deleteTask=(id:number)=>{\n        console.log(id);\n      axios\n      .delete(`http://localhost:4000/api/v1/taskboard/deleteTask/${id}`)\n      .then(()=>\n        store.dispatch(removeTask(id))\n      )}\n      setRefresh(!refresh)\n    return (\n        <div className=\"taskBoard\">\n\t\t\t{store.getState().task.tasks.map((item)=>(\n                <SingleTask\n            key={item.id}\n            id={item.id}\n            content={item.content}\n            type={item.type}\n            onDeleteTask={deleteTask}\n                />\n            ))}\n        </div>\n    );\n}\n\nexport default TaskBoard;\n"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,KAAK,QAAQ,mBAAmB;AACzC,SAAkBC,YAAY,EAAEC,UAAU,QAAQ,0BAA0B;AAC5E,OAAO,iBAAiB;AAExB,OAAOC,UAAU,MAAM,yBAAyB;AAChD,OAAOC,KAAK,MAAe,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AACnC,SAASC,SAASA,CAAA,EAAgB;EAAAC,EAAA;EAC9B,MAAM,CAACC,OAAO,EAACC,UAAU,CAAC,GAACZ,QAAQ,CAAC,KAAK,CAAC;EAC1C;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACAC,SAAS,CAAC,MAAI;IACVK,KAAK,CAACO,GAAG,CACR,oDAAoD,CAAC,CACrDC,IAAI,CAAEC,QAAQ,IAAGA,QAAQ,CAACC,IAAI,CAAC,CAC/BF,IAAI,CAAEG,MAAM,IAAG;MACZf,KAAK,CAACgB,QAAQ,CAACf,YAAY,CAACc,MAAM,CAAC,CAAC;MACpCL,UAAU,CAAC,CAACD,OAAO,CAAC;IACxB,CAAC,CAAC;EACN,CAAC,EAAC,EAAE,CAAC;EAEL,MAAMQ,UAAU,GAAEC,EAAS,IAAG;IAC1BC,OAAO,CAACC,GAAG,CAACF,EAAE,CAAC;IACjBd,KAAK,CACJiB,MAAM,CAAE,qDAAoDH,EAAG,EAAC,CAAC,CACjEN,IAAI,CAAC,MACJZ,KAAK,CAACgB,QAAQ,CAACd,UAAU,CAACgB,EAAE,CAAC,CAC/B,CAAC;EAAA,CAAC;EACFR,UAAU,CAAC,CAACD,OAAO,CAAC;EACtB,oBACIH,OAAA;IAAKgB,SAAS,EAAC,WAAW;IAAAC,QAAA,EAC9BvB,KAAK,CAACwB,QAAQ,CAAC,CAAC,CAACC,IAAI,CAACC,KAAK,CAACC,GAAG,CAAEC,IAAI,iBACzBtB,OAAA,CAACH,UAAU;MAEfe,EAAE,EAAEU,IAAI,CAACV,EAAG;MACZW,OAAO,EAAED,IAAI,CAACC,OAAQ;MACtBC,IAAI,EAAEF,IAAI,CAACE,IAAK;MAChBC,YAAY,EAAEd;IAAW,GAJpBW,IAAI,CAACV,EAAE;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAKP,CACJ;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEd;AAAC3B,EAAA,CA5CQD,SAAS;AAAA6B,EAAA,GAAT7B,SAAS;AA8ClB,eAAeA,SAAS;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}